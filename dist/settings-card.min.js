export class SettingCard extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=this.getTemplate(),e=this.innerHTML;this.innerHTML="",this.shadowRoot.appendChild(t.content.cloneNode(!0)),this.shadowRoot.querySelector(".setting_card .content").innerHTML=e;try{this.shadowRoot.querySelector("button.update_settings").onclick=t=>{this.updateSettings(t.target)};const t=document.createElement("p");t.id="return_text",this.shadowRoot.querySelector(".setting_card").appendChild(t)}catch(t){console.error("Save settings button does not exist")}this.shadowRoot.querySelectorAll("button[data-action]").forEach((t=>{const e=this;t.addEventListener("click",(()=>{const n=t.getAttribute("data-action");n.length>0&&"function"==typeof window[n]&&window[n].call(this,t,e)}))})),setTimeout((()=>{this.shadowRoot.querySelector(".setting_card").classList.add("loaded")}),500)}getTemplate(){const t=this.getAttribute("card-title"),e=document.createElement("template"),n=this.getAttribute("style_path")||"./";return e.innerHTML=`\n        <style>.setting_card{box-shadow:0 0 4px rgba(0,0,0,0.1);height:calc(100% - 4rem);background-color:white;position:relative;border-radius:4px;line-height:1.3;font-size:1rem;padding:2rem}.setting_card .content.processing{pointer-events:none}.setting_card .content.processing>*:not(button){opacity:0.4}@keyframes spinner{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.setting_card .group{display:flex;gap:1rem}.setting_card .split_section{grid-template-columns:repeat(2, 1fr);column-gap:1rem;display:grid}.setting_card form-input[type="hidden"]{display:none}.setting_card button{all:unset;background-color:var(--accent_button, #fd3599);color:var(--accent_button_color, white);padding:0.8rem 1.5rem;position:relative;border-radius:4px;font-size:inherit;cursor:pointer;line-height:1;color:white}.setting_card button:hover{background-color:var(--accent_button_hover, #fc0380)}.setting_card button:focus{background-color:var(--accent_button_active, #ca0266)}.setting_card button.processing{padding-right:50px}.setting_card button.processing::after{animation-timing-function:ease-in-out;animation-iteration-count:infinite;animation-name:spinner;animation-duration:1s;background-color:var(--accent_button_color, white);transform:translateX(-50%);top:calc(50% - 7px);position:absolute;border-radius:4px;display:block;height:15px;content:"";width:15px;right:15px;z-index:1}.setting_card .card_title{font-weight:normal;font-size:1.5em;margin-block:0;line-height:1}.setting_card .card_title::after{background-color:rgba(0,0,0,0.1);margin-block:1.2rem;display:block;height:1px;content:"";width:100%}.setting_card hr{all:unset;background-color:rgba(0,0,0,0.1);margin-block:1.2rem;display:block;height:1px;content:"";width:100%}.setting_card.loaded #return_text{transition-property:opacity, transform;transition-timing-function:ease;transition-duration:300ms}.setting_card #return_text{background-color:#c6ebad;border:solid 1px #8dd75b;color:#386719;width:calc(100% - 6rem);pointer-events:none;position:absolute;border-radius:4px;padding:1rem;opacity:0;margin:0;bottom:0}.setting_card #return_text.error{background-color:#eaaeae;border:solid 1px #d55d5d;color:#651a1a}.setting_card #return_text.show{transform:translateY(-1.5rem);pointer-events:all;opacity:1}\n</style>\n\n        <div class="setting_card" data-style_path="${n}">\n            <h1 class="card_title">${t}</h1>\n            <div class="content"></div>\n        </div>`,e}formProcessing(t){const e=t.closest(".content"),n=t.textContent;return t.textContent="Processing",t.classList.add("processing"),e.classList.add("processing"),n}formFinishedProcessing(t,e){t.closest(".content").classList.remove("processing"),t.classList.remove("processing"),t.textContent=e}updateSettings(t){const e=this.formProcessing(t),n=btoa(JSON.stringify(this.getInputFields()));let o,r=!1;this.sendPostRequest(n).then((t=>{t.success?(console.debug(t.messages),o=t.messages):(console.error(t.messages),o=t.messages,r=!0)})).catch((t=>{console.error(t)})),setTimeout((()=>{this.formFinishedProcessing(t,e),this.showReturnField(o,r)}),1e3)}showReturnField(t,e){const n=this.shadowRoot.querySelector("#return_text");n.innerHTML=t.join(", "),n.setAttribute("class",""),e&&n.classList.add("error"),n.classList.add("show"),setTimeout((()=>{n.classList.remove("show")}),2500)}getInputFields(){const t={};return this.shadowRoot.querySelectorAll("form-input").forEach((e=>{const n=e.shadowRoot.querySelector("input");try{switch(t[n.name]={value:n.value,name:n.name,type:n.type,required:n.required||!1},n.type){case"checkbox":case"radio":t[n.name].checked=!!n.checked,t[n.name].value=t[n.name].checked}}catch(t){console.error("Input not found or is missing attributes")}})),t}async sendPostRequest(t){const e=this.getAttribute("post-to-endpoint")||!1;return(await fetch(e,{headers:{"Content-Type":"application/json","X-WP-Nonce":this.getAttribute("wp_nonce")||""},redirect:"follow",cache:"no-cache",method:"POST",mode:"cors",body:JSON.stringify({base:t})})).json()}}window.customElements.define("setting-card",SettingCard);export class FormInput extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=this.getTemplate();this.innerHTML="",this.shadowRoot.appendChild(t.content.cloneNode(!0))}getTemplate(){const t=document.createElement("template"),e=this.getInput();this.closest(".setting_card").getAttribute("data-style_path");return t.innerHTML=`\n        <style>p{font-size:1rem}p input,p textarea{background-color:#efeff0;border:solid 1px #d5d5d7;width:calc(100% - 1.9rem);font-family:inherit;margin-block:0.5em;border-radius:4px;font-size:inherit;display:block;padding:0.8em}p input:focus,p textarea:focus{outline:solid 1px var(--accent_button, #fd3599);border-color:var(--accent_button, #fd3599)}p textarea{min-height:100px;max-height:300px;resize:vertical}p .helper{margin-block:5px 0;display:block;opacity:0.6}p .toggle{margin-block:0.5em;border-radius:4px;position:relative;font-size:0.9rem;overflow:hidden;cursor:pointer;display:block;height:34px;width:105px}p .toggle input{opacity:0;height:0;width:0}p .toggle input:checked+.slider:before{transform:translate(calc(100% + 44px), -50%);background-color:var(--accent_button_color, white)}p .toggle input:checked+.slider:after{color:var(--accent_button_color, white);content:"Enabled";right:auto;left:10px}p .toggle input:checked+.slider{background-color:var(--accent_button, #fd3599)}p .toggle .slider{background-color:var(--input_background, #efeff0);transition:background ease 200ms;position:absolute;bottom:0;right:0;left:0;top:0}p .toggle .slider::before{transition-property:transform, border-radius;transition-timing-function:ease;transition-duration:200ms;background-color:var(--body_color, #333);transform:translateY(-50%);border-radius:4px;position:absolute;opacity:0.9;height:22px;content:"";width:22px;left:8px;top:50%}p .toggle .slider::after{transform:translateY(-50%);color:var(--body_color, #333);position:absolute;content:"Disabled";right:10px;top:50%}\n</style>\n        ${e}`,t}getInput(){const t=this.gerDefaults();switch(t.type){case"toggle":return`\n            <p>\n                <label for="${t.name}">${t.title}:</label>\n                <small class="helper">${t.helper_text}</small>\n                <label class="toggle">\n                    <input\n                        type="checkbox"\n                        `+(t.checked?'checked="checked"':"")+`\n                        name="${t.name}"\n                        value="${t.value}"\n                        aria-label="${t.title}"\n                    >\n                    <span class="slider"></span>\n                </label>\n            </p>`;case"hidden":return`\n            <input\n                type="hidden"\n                name="${t.name}"\n                value="${t.value}"\n            >`;case"textarea":return`\n            <p>\n                <label for="${t.name}">${t.title}:</label>\n                <small class="helper">${t.helper_text}</small>\n                <textarea\n                    type="${t.type}"\n                    name="${t.name}"\n                    id="${t.name}"\n                    `+(t.required?'required="required"':"")+`\n                    placeholder="${t.placeholder}"\n                    aria-label="${t.title}"\n                    rows="${t.rows}"\n                >${t.value}</textarea>\n            </p>`;default:return`\n            <p>\n                <label for="${t.name}">${t.title}:</label>\n                <small class="helper">${t.helper_text}</small>\n                <input\n                    type="${t.type}"\n                    name="${t.name}"\n                    id="${t.name}"\n                    value="${t.value}"\n                    `+(t.required?'required="required"':"")+`\n                    placeholder="${t.placeholder}"\n                    aria-label="${t.title}"\n                >\n            </p>`}return""}gerDefaults(){return{type:this.getAttribute("type")||"text",title:this.getAttribute("title")||"",name:this.getAttribute("name")||"",required:this.getAttribute("required")||!1,value:this.getAttribute("value")||"",placeholder:this.getAttribute("placeholder")||"",checked:this.getAttribute("checked")||!1,helper_text:this.textContent||"",rows:this.getAttribute("rows")||5}}}window.customElements.define("form-input",FormInput);
