const validateInput=t=>t.value.length>0;export const formProcessing=t=>{const e=t.closest(".content"),s=t.textContent;return t.textContent="Processing",t.classList.add("processing"),e.classList.add("processing"),s};export const formFinishedProcessing=(t,e)=>{t.closest(".content").classList.remove("processing"),t.classList.remove("processing"),t.textContent=e};export const getInputFields=t=>{const e={valid:!0};return t.querySelectorAll("form-input").forEach((t=>{const s=t.shadowRoot.querySelector("input, textarea");if(s)try{switch(e[s.name]={value:s.value,name:s.name,type:s.type,required:s.required||!1},s.type){case"checkbox":case"radio":e[s.name].checked=!!s.checked,e[s.name].value=e[s.name].checked}if("hidden"!==s.type){const t=!s.required||validateInput(s);e[s.name].valid=t,s.parentNode.classList.remove("invalid"),t||(s.parentNode.classList.add("invalid"),e.valid=!1)}}catch(t){console.error("Input not found or is missing attributes",s)}})),e};export class SettingCard extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=this.getTemplate(),e=this.innerHTML;this.innerHTML="",this.shadowRoot.appendChild(t.content.cloneNode(!0)),this.shadowRoot.querySelector(".setting_card .content").innerHTML=e;try{this.shadowRoot.querySelector("button.update_settings").onclick=t=>{this.updateSettings(t.target)};const t=document.createElement("p");t.id="return_text",this.shadowRoot.querySelector(".setting_card").appendChild(t)}catch(t){console.error("Save settings button does not exist")}this.shadowRoot.querySelectorAll("button[data-action]").forEach((t=>{const e=this;t.addEventListener("click",(()=>{const s=t.getAttribute("data-action");s.length>0&&"function"==typeof window[s]&&window[s].call(this,t,e)}))})),setTimeout((()=>{this.shadowRoot.querySelector(".setting_card").classList.add("loaded")}),500)}getTemplate(){const t=this.getAttribute("card-title"),e=document.createElement("template"),s=this.getAttribute("style_path")||"./",o=this.getAttribute("external_style")||"./";let n="";return o.length>0&&(n=`<link rel="stylesheet" href="${o}">`),e.innerHTML=`\n        <link rel="stylesheet" href="${s}card-styles.css">\n        ${n}\n\n        <div class="setting_card" data-style_path="${s}">\n            <h1 class="card_title">${t}</h1>\n            <div class="content"></div>\n        </div>`,e}updateSettings(t){const e=formProcessing(t);let s=!0;const o=this.getInputFields();if(!o.valid)return formFinishedProcessing(t,e),void this.showReturnField(["Some fields did not validate"],s);const n=btoa(JSON.stringify(o));let i=["No message to display"];this.sendPostRequest(n).then((o=>{o.success?(console.debug(o.messages),i=o.messages,s=!1):(console.error(o.messages),i=o.messages,s=!0),formFinishedProcessing(t,e),this.showReturnField(i,s)})).catch((t=>{console.error(t)}))}showReturnField(t,e){const s=this.shadowRoot.querySelector("#return_text");s.innerHTML=t.join(", "),s.setAttribute("class",""),e&&s.classList.add("error"),s.classList.add("show"),setTimeout((()=>{s.classList.remove("show")}),3e3)}getInputFields(t){return getInputFields(t||this.shadowRoot)}async sendPostRequest(t,e,s){const o="string"==typeof e&&e.length>0?e:this.getAttribute("post-to-endpoint")||!1;let n="POST";if("string"==typeof s&&s.length>0)switch(s.toLowerCase()){case"get":case"put":case"delete":n=s.toUpperCase()}const i={headers:{"Content-Type":"application/json","X-WP-Nonce":this.getAttribute("wp_nonce")||""},redirect:"follow",cache:"no-cache",method:n,mode:"cors",body:JSON.stringify({base:t})};"GET"===n&&delete i.body;return(await fetch(o,i)).json()}}window.customElements.define("setting-card",SettingCard);
