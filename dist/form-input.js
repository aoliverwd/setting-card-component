export class FormInput extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const e=this.getTemplate();this.innerHTML="",this.shadowRoot.appendChild(e.content.cloneNode(!0)),this.shadowRoot.updateInput=e=>{let t;if("textarea"===this.getAttribute("type"))t=this.shadowRoot.querySelector("textarea"),t&&(t.value=e);else t=this.shadowRoot.querySelector("input"),t&&(t.value=e)}}getTemplate(){const e=document.createElement("template"),t=this.getInput(),l=this.closest("[data-style_path]"),n=l?l.getAttribute("data-style_path"):"./";return e.innerHTML=`\n        <link rel="stylesheet" href="${n}input-styles.css">\n        ${t}`,e}getInput(){const e=this.gerDefaults();switch(e.type){case"toggle":return`\n            <p>\n                <label for="${e.name}">${e.title}:</label>\n                <small class="helper">${e.helper_text}</small>\n                <label class="toggle">\n                    <input\n                        type="checkbox"\n                        `+(e.checked?'checked="checked"':"")+`\n                        name="${e.name}"\n                        value="${e.value}"\n                        aria-label="${e.title}"\n                    >\n                    <span class="slider"></span>\n                </label>\n            </p>`;case"hidden":return`\n            <input\n                type="hidden"\n                name="${e.name}"\n                value="${e.value}"\n            >`;case"textarea":return`\n            <p>\n                <label for="${e.name}">${e.title}:</label>\n                <small class="helper">${e.helper_text}</small>\n                <textarea\n                    type="${e.type}"\n                    name="${e.name}"\n                    id="${e.name}"\n                    `+(e.required?'required="required" ':"")+"\n                    "+(e.disabled?"disabled ":"")+`\n                    placeholder="${e.placeholder}"\n                    aria-label="${e.title}"\n                    rows="${e.rows}"\n                >${e.value}</textarea>\n            </p>`;default:return`\n            <p>\n                <label for="${e.name}">${e.title}:</label>\n                <small class="helper">${e.helper_text}</small>\n                <input\n                    type="${e.type}"\n                    name="${e.name}"\n                    id="${e.name}"\n                    value="${e.value}"\n                    `+(e.required?'required="required" ':"")+"\n                    "+(e.disabled?"disabled":"")+`\n                    placeholder="${e.placeholder}"\n                    aria-label="${e.title}"\n                >\n            </p>`}return""}gerDefaults(){return{type:this.getAttribute("type")||"text",title:this.getAttribute("title")||"",name:this.getAttribute("name")||"",required:this.getAttribute("required")||!1,disabled:this.getAttribute("disabled")||!1,value:this.getAttribute("value")||"",placeholder:this.getAttribute("placeholder")||"",checked:this.getAttribute("checked")||!1,helper_text:this.textContent||"",rows:this.getAttribute("rows")||5}}}window.customElements.define("form-input",FormInput);
